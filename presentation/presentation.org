#+TITLE: SVOR Competition
#+AUTHOR: Max Generowicz
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_ROOT: file:///home/max/src/reveal.js
#+OPTIONS: reveal_title_slide:"<h2>%t</h2><h5>%a</h5>"
#+OPTIONS: reveal_slide_number:nil toc:nil num:nil
#+REVEAL_TRANS: slide
#+HTML_HEAD: <style>
#+HTML_HEAD: .reveal h1 {text-transform:none;}
#+HTML_HEAD: .reveal h2 {text-transform:none;}
#+HTML_HEAD: .reveal h3 {text-transform:none;}
#+HTML_HEAD: .reveal h4 {text-transform:none;}
#+HTML_HEAD: .reveal h5 {text-transform:none;}
#+HTML_HEAD: </style>
* Problem description
#+ATTR_REVEAL: :frag (appear)
+ Give link to the problem
+ Describe problem
** Point distribution
#+ATTR_HTML: :width 75% :height 75%
[[file:point-distribution.png]]
* Solution outline
#+ATTR_REVEAL: :frag (appear)
+ Write a computer program
+ Working objective function
+ Random search
+ Multiple processors
+ Best neighbour search
+ Local minimum search
+ Random (local minimum) search
+ Edge swap search
+ Random (edge swap) search
+ This was enough
* Tools
#+ATTR_REVEAL: :frag (appear)
+ Python
+ Numpy
+ Pytest
+ Pyqtgraph
* The program
** Objective function
#+ATTR_HTML: :width 120% :height 120%
#+BEGIN_SRC python
def objective_function(order):
    coordinates = [positions[n] for n in order]
    leg_lengths = list(map(distance, coordinates[1:], coordinates[:-1]))
    return int(floor(sum(np.cumsum(leg_lengths))))
#+END_SRC

** numpy.cumsum
#+BEGIN_SRC
>>> np.cumsum([1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
        array([1,  3,  6, 10, 15, 21, 28, 36, 45, 55])
#+END_SRC
* Results
* Demo
* Available on GitHub
